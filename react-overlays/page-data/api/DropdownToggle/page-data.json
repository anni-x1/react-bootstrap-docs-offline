{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-component-tsx","path":"/api/DropdownToggle","result":{"data":{"docpocalypse":{"id":"1d6a9cdb-db15-5b6f-a42d-ede3dcdda3f1","name":"DropdownToggle","importName":"import DropdownToggle from 'react-overlays/DropdownToggle'","example":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Also exported as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Dropdown.Toggle>\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dropdown\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Also exported as <code>&#x3C;Dropdown.Toggle></code> from <code>Dropdown</code>.</p>"}},"composes":[],"props":[{"name":"children","tags":[{"name":"type","value":"{Function ({\n  show: boolean,\n  toggle: (show: boolean) => void,\n  props: {\n    ref: (?HTMLElement) => void,\n    aria-haspopup: true\n    aria-expanded: boolean\n  },\n}) => React.Element}"}],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A render prop that returns a Toggle element. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \"\\nargument should spread through to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a component that can accept a ref\"), \". Use\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onToggle\"), \" argument to toggle the menu open or closed\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A render prop that returns a Toggle element. The <code>props</code>\nargument should spread through to <strong>a component that can accept a ref</strong>. Use\nthe <code>onToggle</code> argument to toggle the menu open or closed</p>"}},"required":true,"tsType":{"name":"signature","type":"function","raw":"(\n  args: UseDropdownToggleHelpers & { props: UseDropdownToggleProps },\n) => React.ReactNode","signature":{"arguments":[{"name":"args","type":{"name":"intersection","raw":"UseDropdownToggleHelpers & { props: UseDropdownToggleProps }","elements":[{"name":"UseDropdownToggleHelpers"},{"name":"signature","type":"object","raw":"{ props: UseDropdownToggleProps }","signature":{"properties":[{"key":"props","value":{"name":"UseDropdownToggleProps","required":true}}]}}]}}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"type":{"name":"Function ({\n  show: boolean,\n  toggle: (show: boolean) => void,\n  props: {\n    ref: (?HTMLElement) => void,\n    aria-haspopup: true\n    aria-expanded: boolean\n  },\n}) => React.Element","value":null,"raw":null}}]}},"pageContext":{"nodeId":"1d6a9cdb-db15-5b6f-a42d-ede3dcdda3f1","exampleId":null}}}