{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-component-tsx","path":"/api/Dropdown","result":{"data":{"docpocalypse":{"id":"58e2ede0-553f-5f83-95b0-e46f0ce74719","name":"Dropdown","importName":"import Dropdown from 'react-overlays/Dropdown'","example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dropdown\"), \" is set of structural components for building, accessible dropdown menus with close-on-click,\\nkeyboard navigation, and correct focus handling. As with all the react-overlay's\\ncomponents it's BYOS (Bring Your Own Styles). Dropdown is primarily\\nbuilt from three base components, you should compose to build your Dropdowns.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dropdown\"), \": wraps the menu and toggle, and handles keyboard navigation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dropdown.Toggle\"), \": generally a button that triggers the menu opening\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Dropdown.Menu\"), \": the overlaid, menu, positioned to the toggle with PopperJS\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"renderAsComponent\",\n    \"renderAsComponent\": true\n  }), \"import {\\n  useDropdownMenu,\\n  useDropdownToggle,\\n  Dropdown,\\n} from \\\"react-overlays\\\";\\n\\nconst MenuContainer = styled(\\\"div\\\")`\\n  display: ${(p) => (p.show ? \\\"flex\\\" : \\\"none\\\")};\\n  min-width: 150px;\\n  position: absolute;\\n  z-index: 1000;\\n  flex-direction: column;\\n  border: 1px solid #e5e5e5;\\n  background-color: white;\\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\\n`;\\n\\nconst Menu = ({ role }) => {\\n  const { show, onClose, props } = useDropdownMenu({\\n    flip: true,\\n    offset: [0, 8],\\n  });\\n  return (\\n    <MenuContainer {...props} role={role} show={show}>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={onClose}\\n        className=\\\"text-left hover:bg-brand-100 px-6 py-2\\\"\\n      >\\n        Item 1\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={onClose}\\n        className=\\\"text-left hover:bg-brand-100 px-6 py-2\\\"\\n      >\\n        Item 2\\n      </button>\\n    </MenuContainer>\\n  );\\n};\\n\\nconst Toggle = ({ id, children }) => {\\n  const [props, { show, toggle }] = useDropdownToggle();\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      className=\\\"btn\\\"\\n      id={id}\\n      {...props}\\n      onClick={toggle}\\n    >\\n      {children}\\n    </button>\\n  );\\n};\\n\\nconst DropdownButton = ({\\n  show,\\n  onToggle,\\n  drop,\\n  alignEnd,\\n  title,\\n  role,\\n}) => (\\n  <Dropdown\\n    show={show}\\n    onToggle={onToggle}\\n    drop={drop}\\n    alignEnd={alignEnd}\\n    itemSelector=\\\"button:not(:disabled)\\\"\\n  >\\n    {({ props }) => (\\n      <div {...props} className=\\\"relative inline-block\\\">\\n        <Toggle id=\\\"example-toggle\\\">{title}</Toggle>\\n        <Menu role={role} />\\n      </div>\\n    )}\\n  </Dropdown>\\n);\\n\\nconst ButtonToolbar = styled(\\\"div\\\")`\\n  & > * + * {\\n    margin-left: 12px;\\n  }\\n`;\\n\\nconst [show, setShow] = useState(false);\\n\\n<ButtonToolbar className=\\\"dropdown-example\\\">\\n  <DropdownButton\\n    show={show}\\n    onToggle={(nextShow) => setShow(nextShow)}\\n    title={`${show ? \\\"Close\\\" : \\\"Open\\\"} Dropdown`}\\n  />\\n  <DropdownButton alignEnd title=\\\"Align right\\\" />\\n\\n  <DropdownButton drop=\\\"up\\\" title=\\\"Drop up\\\" />\\n  <DropdownButton role=\\\"menu\\\" title=\\\"Role 'menu'\\\" />\\n</ButtonToolbar>;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":""}},"composes":[],"props":[{"name":"children","tags":[{"name":"type","value":"{Function ({\n  props: {\n    onKeyDown: (SyntheticEvent) => void,\n  },\n}) => React.Element}"}],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A render prop that returns the root dropdown element. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"props\"), \"\\nargument should spread through to an element containing \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"both\"), \" the\\nmenu and toggle in order to handle keyboard events for focus management.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A render prop that returns the root dropdown element. The <code>props</code>\nargument should spread through to an element containing <em>both</em> the\nmenu and toggle in order to handle keyboard events for focus management.</p>"}},"required":true,"tsType":{"name":"signature","type":"function","raw":"(arg: { props: DropdownInjectedProps }) => React.ReactNode","signature":{"arguments":[{"name":"arg","type":{"name":"signature","type":"object","raw":"{ props: DropdownInjectedProps }","signature":{"properties":[{"key":"props","value":{"name":"DropdownInjectedProps","required":true}}]}}}],"return":{"name":"ReactReactNode","raw":"React.ReactNode"}}},"type":{"name":"Function ({\n  props: {\n    onKeyDown: (SyntheticEvent) => void,\n  },\n}) => React.Element","value":null,"raw":null}},{"name":"drop","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Determines the direction and location of the Menu in relation to it's Toggle.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Determines the direction and location of the Menu in relation to it's Toggle.</p>"}},"required":false,"tsType":{"name":"DropDirection"},"type":{"name":"enum","value":[{"value":"'up'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false},{"value":"'down'","computed":false}],"raw":null}},{"name":"focusFirstItemOnShow","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Controls the focus behavior for when the Dropdown is opened. Set to\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" to always focus the first menu item, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyboard\"), \" to focus only when\\nnavigating via the keyboard, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" to disable completely\"), mdx(\"p\", null, \"The Default behavior is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"unless\"), \" the Menu has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"role=\\\"menu\\\"\"), \"\\nwhere it will default to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keyboard\"), \" to match the recommended \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton\"\n  }), \"ARIA Authoring practices\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Controls the focus behavior for when the Dropdown is opened. Set to\n<code>true</code> to always focus the first menu item, <code>keyboard</code> to focus only when\nnavigating via the keyboard, or <code>false</code> to disable completely</p>\n<p>The Default behavior is <code>false</code> <strong>unless</strong> the Menu has a <code>role=\"menu\"</code>\nwhere it will default to <code>keyboard</code> to match the recommended <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton\">ARIA Authoring practices</a>.</p>"}},"required":false,"tsType":{"name":"union","raw":"false | true | 'keyboard'","elements":[{"name":"literal","value":"false"},{"name":"literal","value":"true"},{"name":"literal","value":"'keyboard'"}]},"type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"true","computed":false},{"value":"'keyboard'","computed":false}],"raw":null}},{"name":"itemSelector","tags":[],"defaultValue":{"value":"'* > *'","computed":false},"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A css slector string that will return \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"focusable\"), \" menu items.\\nSelectors should be relative to the menu component:\\ne.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \" > li:not('.disabled')\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A css slector string that will return <strong>focusable</strong> menu items.\nSelectors should be relative to the menu component:\ne.g. <code>> li:not('.disabled')</code></p>"}},"required":false,"tsType":{"name":"string"},"type":{"name":"string","value":null,"raw":null}},{"name":"alignEnd","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"top-start\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bottom-start\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is <code>top-start</code> or <code>bottom-start</code>.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"bool","value":null,"raw":null}},{"name":"show","tags":[{"name":"controllable","value":"onToggle"}],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Whether or not the Dropdown is visible.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Whether or not the Dropdown is visible.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"bool","value":null,"raw":null}},{"name":"defaultShow","tags":[],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sets the initial show position of the Dropdown.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>Sets the initial show position of the Dropdown.</p>"}},"required":false,"tsType":{"name":"boolean"},"type":{"name":"bool","value":null,"raw":null}},{"name":"onToggle","tags":[{"name":"controllable","value":"show"}],"defaultValue":null,"description":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A callback fired when the Dropdown wishes to change visibility. Called with the requested\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"show\"), \" value, the DOM event, and the source that fired it: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'click'\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'keydown'\"), \",\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'rootClose'\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"'select'\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"static\",\n    \"static\": true\n  }), \"function(\\n  isOpen: boolean,\\n  event: SyntheticEvent,\\n): void\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"markdownRemark":{"html":"<p>A callback fired when the Dropdown wishes to change visibility. Called with the requested\n<code>show</code> value, the DOM event, and the source that fired it: <code>'click'</code>,<code>'keydown'</code>,<code>'rootClose'</code>, or <code>'select'</code>.</p>\n<pre><code class=\"language-ts\" data-meta=\"static\">function(\n  isOpen: boolean,\n  event: SyntheticEvent,\n): void\n</code></pre>"}},"required":true,"tsType":{"name":"signature","type":"function","raw":"(nextShow: boolean, event?: React.SyntheticEvent) => void","signature":{"arguments":[{"name":"nextShow","type":{"name":"boolean"}},{"name":"event","type":{"name":"ReactSyntheticEvent","raw":"React.SyntheticEvent"}}],"return":{"name":"void"}}},"type":{"name":"func","value":null,"raw":null}}]}},"pageContext":{"nodeId":"58e2ede0-553f-5f83-95b0-e46f0ce74719","exampleId":"f28c35a8-10e1-5a77-9963-f3d7ab54f3fe"}}}