{"componentChunkName":"component---node-modules-docpocalypse-gatsby-theme-src-templates-hook-tsx","path":"/api/useDropdownToggle","result":{"data":{"docpocalypse":{"id":"5bb61e4a-ae76-5a9b-a553-256e9b387750","name":"useDropdownToggle","importName":"import useDropdownToggle from 'react-overlays/DropdownToggle'","example":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Create custom dropdown toggles without the extra component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useDropdownToggle\"), \".\\nMake sure to spread through the returned props. Accessible \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Toggle\"), \"s should\\nalso provide an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" to the HTML element that is rendered.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"showImports\",\n    \"showImports\": true\n  }), \"import { useDropdownToggle } from \\\"react-overlays\\\";\\n\\nconst Toggle = ({ id, children }) => {\\n  const [props, { show, toggle }] = useDropdownToggle();\\n\\n  return (\\n    <button\\n      id={id}\\n      type=\\\"button\\\"\\n      className=\\\"btn\\\"\\n      {...props}\\n      onClick={toggle}\\n    >\\n      I'm a toggle \\u2304\\n    </button>\\n  );\\n};\\n\\n<Toggle />;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"signatures":[{"kind":"function","name":"useDropdownToggle","description":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Wires up Dropdown toggle functionality, returning a set a props to attach\\nto the element that functions as the dropdown toggle (generally a button).\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"examples":[],"type":null,"params":null,"properties":null,"optional":false,"returns":[{"name":null,"description":null,"optional":false,"type":{"name":null,"type":"ArrayType","elements":[{"type":"NameExpression","name":"UseDropdownToggleProps","typeDef___NODE":null},{"type":"NameExpression","name":"UseDropdownToggleHelpers","typeDef___NODE":null}],"expression":null,"applications":null}}],"members":{"static":null}}]}},"pageContext":{"nodeId":"5bb61e4a-ae76-5a9b-a553-256e9b387750","exampleId":"7c1bae35-f3b0-58a6-96b1-3da6bc3ae0e0"}}}